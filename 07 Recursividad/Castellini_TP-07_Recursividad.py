#Pr√°ctico 11: Aplicaci√≥n de la Recursividad
#Objetivo:
#Comprender el uso de recursividad en problemas matem√°ticos simples.
#Resultados de aprendizaje:
#‚úì Comprensi√≥n y aplicaci√≥n de la recursividad: El estudiante ser√° capaz de definir y
#comprender el concepto de recursividad, identificando los casos base y recursivos en
#una funci√≥n recursiva.
#‚úì Dise√±o y desarrollo de algoritmos recursivos: El estudiante ser√° capaz de dise√±ar
#funciones recursivas para resolver problemas complejos, descomponiendo el problema
#en subproblemas m√°s sencillos.
#‚úì Resoluci√≥n de problemas a trav√©s de la recursividad: El estudiante ser√° capaz de aplicar
#la recursividad en la resoluci√≥n de una variedad de problemas, como la b√∫squeda en
#estructuras de datos, el ordenamiento y la generaci√≥n de estructuras combinatorias.
#Ejercicios

"""1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa
funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros
entre 1 y el n√∫mero que indique el usuario."""

#Funcion que calcula el factorial
def fact(n):
    if n == 0:      #caso base
        return 1
    else:
        return fact(n-1) * n   #caso recursivo

# Solicitar al usuario el n√∫mero
numero = int(input("Ingrese un n√∫mero: "))

# Calcular y mostrar el factorial de todos los n√∫meros del 1 al n√∫mero ingresado
for i in range(1, numero + 1):
    print(f"El factorial de {i} es: {fact(i)}")


"""
2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n
indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario
especifique."""

def fibonacci(n):
    if n <= 0:
        return "La posicion debe ser un numero positivo"
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

def mostrar_serie_fibonacci(posicion):
    serie = []
    for i in range(1, posicion + 1):
        serie.append(fibonacci(i))
    return serie

# Solicitar la posici√≥n al usuario
posicion = int(input("Introduce la posici√≥n de la serie de Fibonacci: "))

# Mostrar el valor en la posici√≥n espec√≠fica
print(f"El valor de Fibonacci en la posici√≥n {posicion} es: {fibonacci(posicion)}")

# Mostrar la serie completa
serie_completa = mostrar_serie_fibonacci(posicion)
print(f"La serie de Fibonacci hasta la posici√≥n {posicion} es: {serie_completa}")


"""
3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un
exponente, utilizando la f√≥rmula ùëõ
ùëö = ùëõ ‚àó ùëõ(ùëö‚àí1)
Prueba esta funci√≥n en un
algoritmo general."""

def potencia(base, exponente):
    if exponente == 0:
        return 1
    else:
        return base * potencia(base, exponente - 1)

# Prueba de la funci√≥n en un algoritmo general
base = int(input("Introduce el n√∫mero base: "))
exponente = int(input("Introduce el exponente: "))
resultado = potencia(base, exponente)
print(f"{base} elevado a la potencia de {exponente} es: {resultado}")

"""4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base
decimal y devuelva su representaci√≥n en binario como una cadena de texto.
Cuando representamos un n√∫mero en binario, lo expresamos usando solamente ceros (0) y
unos (1), en base 2. Para convertir un n√∫mero decimal a binario, se puede seguir este
procedimiento:
1. Dividir el n√∫mero por 2.
2. Guardar el resto (0 o 1).
3. Repetir el proceso con el cociente hasta que llegue a 0.
4. Los restos obtenidos, le√≠dos de abajo hacia arriba, forman el n√∫mero binario.

üß†Ejemplo:
Convertir el n√∫mero 10 a binario:
10 √∑ 2 = 5 resto: 0
5 √∑ 2 = 2 resto: 1
2 √∑ 2 = 1 resto: 0
1 √∑ 2 = 0 resto: 1
Leyendo los restos de abajo hacia arriba: 1 0 1 0 ‚Üí El resultado binario es "1010"."""

def decimal_a_binario(n):
    if n == 0:
        return "0"
    elif n == 1:
        return "1"
    else:
        return decimal_a_binario(n // 2) + str(n % 2)

# Prueba de la funci√≥n
numero_decimal = 100  # Puedes cambiar este valor para probar con otros n√∫meros
representacion_binaria = decimal_a_binario(numero_decimal)
print(f"La representaci√≥n binaria de {numero_decimal} es: {representacion_binaria}")


"""
5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una
cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no
lo es.
 Requisitos:
La soluci√≥n debe ser recursiva.
No se debe usar [::-1] ni la funci√≥n reversed()."""

def es_palindromo(palabra):
    # Caso base: si la palabra tiene 0 o 1 caracteres, es un pal√≠ndromo
    if len(palabra) <= 1:
        return True
    # Si el primer y el √∫ltimo car√°cter son iguales, verifica el resto de la palabra
    elif palabra[0] == palabra[-1]:
        return es_palindromo(palabra[1:-1])
    else:
        return False

# Prueba de la funci√≥n
palabra = input("Introduce una palabra sin espacios ni tildes: ")
resultado = es_palindromo(palabra)
print(f"¬øLa palabra '{palabra}' es un pal√≠ndromo? {resultado}")

"""
6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un
n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.
 Restricciones:
No se puede convertir el n√∫mero a string.
Us√° operaciones matem√°ticas (%, //) y recursi√≥n.
Ejemplos:
suma_digitos(1234) ‚Üí 10 (1 + 2 + 3 + 4)
suma_digitos(9) ‚Üí 9
suma_digitos(305) ‚Üí 8 (3 + 0 + 5)"""

def suma_digitos(n):
    # Caso base: si n es menor que 10, retorna n
    if n < 10:
        return n
    else:
        # Suma el √∫ltimo d√≠gito y llama recursivamente con el n√∫mero sin el √∫ltimo d√≠gito
        return n % 10 + suma_digitos(n // 10)


# Prueba de la funci√≥n con ejemplos proporcionados
print(suma_digitos(1234))  # Output: 10
print(suma_digitos(9))     # Output: 9
print(suma_digitos(305))   # Output: 8


"""7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n
bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al
√∫ltimo nivel con un solo bloque.
Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el
nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la
pir√°mide.
 Ejemplos:
contar_bloques(1) ‚Üí 1 (1)
contar_bloques(2) ‚Üí 3 (2 + 1)
contar_bloques(4) ‚Üí 10 (4 + 3 + 2 + 1)"""


def contar_bloques(n):
    # Caso base: si n es 1, retorna 1
    if n == 1:
        return 1
    else:
        # Suma el n√∫mero de bloques en el nivel actual y llama recursivamente con el siguiente nivel
        return n + contar_bloques(n - 1)

# Prueba de la funci√≥n con ejemplos proporcionados
print(f"contar_bloques(1) ‚Üí {contar_bloques(1)}")  # Output: 1
print(f"contar_bloques(2) ‚Üí {contar_bloques(2)}")  # Output: 3
print(f"contar_bloques(4) ‚Üí {contar_bloques(4)}")  # Output: 10

# Ejemplo interactivo
n = int(input("\nIntroduce el n√∫mero de bloques en el nivel m√°s bajo: "))
total = contar_bloques(n)
print(f"Para una pir√°mide con {n} bloques en la base se necesitan {total} bloques en total.")



"""8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un
n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces
aparece ese d√≠gito dentro del n√∫mero.
 Ejemplos:
contar_digito(12233421, 2) ‚Üí 3
contar_digito(5555, 5) ‚Üí 4
contar_digito(123456, 7) ‚Üí 0 """


def contar_digito(numero, digito):
    # Caso especial: si el n√∫mero es 0 y buscamos el d√≠gito 0
    if numero == 0 and digito == 0:
        return 1
    # Caso base: si el n√∫mero es 0, retorna 0
    elif numero == 0:
        return 0
    else:
        # Verifica si el √∫ltimo d√≠gito es igual al d√≠gito buscado y suma 1 si es as√≠
        if numero % 10 == digito:
            return 1 + contar_digito(numero // 10, digito)
        else:
            return contar_digito(numero // 10, digito)

# Prueba de la funci√≥n con ejemplos proporcionados
print(f"contar_digito(12233421, 2) ‚Üí {contar_digito(12233421, 2)}")  # Output: 3
print(f"contar_digito(5555, 5) ‚Üí {contar_digito(5555, 5)}")          # Output: 4
print(f"contar_digito(123456, 7) ‚Üí {contar_digito(123456, 7)}")      # Output: 0

# Casos adicionales
print(f"contar_digito(0, 0) ‚Üí {contar_digito(0, 0)}")                # Output: 1
print(f"contar_digito(1020304, 0) ‚Üí {contar_digito(1020304, 0)}")    # Output: 3

# Ejemplo interactivo
numero = int(input("\nIntroduce un n√∫mero entero positivo: "))
digito = int(input("Introduce el d√≠gito a buscar (0-9): "))
resultado = contar_digito(numero, digito)
print(f"El d√≠gito {digito} aparece {resultado} veces en el n√∫mero {numero}.")
